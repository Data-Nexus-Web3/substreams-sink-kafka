// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: proto/token_metadata/v1/service.proto

package tokenmetadatav1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TokenMetadataService_BatchGetTokenMetadata_FullMethodName      = "/token_metadata.v1.TokenMetadataService/BatchGetTokenMetadata"
	TokenMetadataService_GetTokenMetadata_FullMethodName           = "/token_metadata.v1.TokenMetadataService/GetTokenMetadata"
	TokenMetadataService_BatchNormalizeTokenAmounts_FullMethodName = "/token_metadata.v1.TokenMetadataService/BatchNormalizeTokenAmounts"
	TokenMetadataService_Health_FullMethodName                     = "/token_metadata.v1.TokenMetadataService/Health"
)

// TokenMetadataServiceClient is the client API for TokenMetadataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// TokenMetadataService provides high-performance token metadata lookups
// with fork-aware blockchain state management
type TokenMetadataServiceClient interface {
	// Batch lookup of token metadata at a specific block
	BatchGetTokenMetadata(ctx context.Context, in *BatchTokenRequest, opts ...grpc.CallOption) (*BatchTokenResponse, error)
	// Single token lookup (for testing/debugging)
	GetTokenMetadata(ctx context.Context, in *TokenRequest, opts ...grpc.CallOption) (*TokenResponse, error)
	// Normalize raw token amounts to formatted strings
	BatchNormalizeTokenAmounts(ctx context.Context, in *BatchNormalizeRequest, opts ...grpc.CallOption) (*BatchNormalizeResponse, error)
	// Health check endpoint
	Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error)
}

type tokenMetadataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTokenMetadataServiceClient(cc grpc.ClientConnInterface) TokenMetadataServiceClient {
	return &tokenMetadataServiceClient{cc}
}

func (c *tokenMetadataServiceClient) BatchGetTokenMetadata(ctx context.Context, in *BatchTokenRequest, opts ...grpc.CallOption) (*BatchTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchTokenResponse)
	err := c.cc.Invoke(ctx, TokenMetadataService_BatchGetTokenMetadata_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenMetadataServiceClient) GetTokenMetadata(ctx context.Context, in *TokenRequest, opts ...grpc.CallOption) (*TokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TokenResponse)
	err := c.cc.Invoke(ctx, TokenMetadataService_GetTokenMetadata_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenMetadataServiceClient) BatchNormalizeTokenAmounts(ctx context.Context, in *BatchNormalizeRequest, opts ...grpc.CallOption) (*BatchNormalizeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchNormalizeResponse)
	err := c.cc.Invoke(ctx, TokenMetadataService_BatchNormalizeTokenAmounts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenMetadataServiceClient) Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, TokenMetadataService_Health_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TokenMetadataServiceServer is the server API for TokenMetadataService service.
// All implementations must embed UnimplementedTokenMetadataServiceServer
// for forward compatibility.
//
// TokenMetadataService provides high-performance token metadata lookups
// with fork-aware blockchain state management
type TokenMetadataServiceServer interface {
	// Batch lookup of token metadata at a specific block
	BatchGetTokenMetadata(context.Context, *BatchTokenRequest) (*BatchTokenResponse, error)
	// Single token lookup (for testing/debugging)
	GetTokenMetadata(context.Context, *TokenRequest) (*TokenResponse, error)
	// Normalize raw token amounts to formatted strings
	BatchNormalizeTokenAmounts(context.Context, *BatchNormalizeRequest) (*BatchNormalizeResponse, error)
	// Health check endpoint
	Health(context.Context, *HealthRequest) (*HealthResponse, error)
	mustEmbedUnimplementedTokenMetadataServiceServer()
}

// UnimplementedTokenMetadataServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTokenMetadataServiceServer struct{}

func (UnimplementedTokenMetadataServiceServer) BatchGetTokenMetadata(context.Context, *BatchTokenRequest) (*BatchTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchGetTokenMetadata not implemented")
}
func (UnimplementedTokenMetadataServiceServer) GetTokenMetadata(context.Context, *TokenRequest) (*TokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTokenMetadata not implemented")
}
func (UnimplementedTokenMetadataServiceServer) BatchNormalizeTokenAmounts(context.Context, *BatchNormalizeRequest) (*BatchNormalizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchNormalizeTokenAmounts not implemented")
}
func (UnimplementedTokenMetadataServiceServer) Health(context.Context, *HealthRequest) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (UnimplementedTokenMetadataServiceServer) mustEmbedUnimplementedTokenMetadataServiceServer() {}
func (UnimplementedTokenMetadataServiceServer) testEmbeddedByValue()                              {}

// UnsafeTokenMetadataServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TokenMetadataServiceServer will
// result in compilation errors.
type UnsafeTokenMetadataServiceServer interface {
	mustEmbedUnimplementedTokenMetadataServiceServer()
}

func RegisterTokenMetadataServiceServer(s grpc.ServiceRegistrar, srv TokenMetadataServiceServer) {
	// If the following call pancis, it indicates UnimplementedTokenMetadataServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TokenMetadataService_ServiceDesc, srv)
}

func _TokenMetadataService_BatchGetTokenMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenMetadataServiceServer).BatchGetTokenMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TokenMetadataService_BatchGetTokenMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenMetadataServiceServer).BatchGetTokenMetadata(ctx, req.(*BatchTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokenMetadataService_GetTokenMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenMetadataServiceServer).GetTokenMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TokenMetadataService_GetTokenMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenMetadataServiceServer).GetTokenMetadata(ctx, req.(*TokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokenMetadataService_BatchNormalizeTokenAmounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchNormalizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenMetadataServiceServer).BatchNormalizeTokenAmounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TokenMetadataService_BatchNormalizeTokenAmounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenMetadataServiceServer).BatchNormalizeTokenAmounts(ctx, req.(*BatchNormalizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokenMetadataService_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenMetadataServiceServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TokenMetadataService_Health_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenMetadataServiceServer).Health(ctx, req.(*HealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TokenMetadataService_ServiceDesc is the grpc.ServiceDesc for TokenMetadataService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TokenMetadataService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "token_metadata.v1.TokenMetadataService",
	HandlerType: (*TokenMetadataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BatchGetTokenMetadata",
			Handler:    _TokenMetadataService_BatchGetTokenMetadata_Handler,
		},
		{
			MethodName: "GetTokenMetadata",
			Handler:    _TokenMetadataService_GetTokenMetadata_Handler,
		},
		{
			MethodName: "BatchNormalizeTokenAmounts",
			Handler:    _TokenMetadataService_BatchNormalizeTokenAmounts_Handler,
		},
		{
			MethodName: "Health",
			Handler:    _TokenMetadataService_Health_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/token_metadata/v1/service.proto",
}
